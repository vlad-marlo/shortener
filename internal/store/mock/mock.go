// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vlad-marlo/shortener/internal/store/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Create mocks base method.
func (m *MockStore) Create(arg0 context.Context, arg1 *model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), arg0, arg1)
}

// GetAllUserURLs mocks base method.
func (m *MockStore) GetAllUserURLs(arg0 context.Context, arg1 string) ([]*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserURLs", arg0, arg1)
	ret0, _ := ret[0].([]*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserURLs indicates an expected call of GetAllUserURLs.
func (mr *MockStoreMockRecorder) GetAllUserURLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserURLs", reflect.TypeOf((*MockStore)(nil).GetAllUserURLs), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockStore) GetByID(arg0 context.Context, arg1 string) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStoreMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStore)(nil).GetByID), arg0, arg1)
}

// Ping mocks base method.
func (m *MockStore) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), arg0)
}

// URLsBulkCreate mocks base method.
func (m *MockStore) URLsBulkCreate(arg0 context.Context, arg1 []*model.URL) ([]*model.BatchCreateURLsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLsBulkCreate", arg0, arg1)
	ret0, _ := ret[0].([]*model.BatchCreateURLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLsBulkCreate indicates an expected call of URLsBulkCreate.
func (mr *MockStoreMockRecorder) URLsBulkCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLsBulkCreate", reflect.TypeOf((*MockStore)(nil).URLsBulkCreate), arg0, arg1)
}

// URLsBulkDelete mocks base method.
func (m *MockStore) URLsBulkDelete(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLsBulkDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// URLsBulkDelete indicates an expected call of URLsBulkDelete.
func (mr *MockStoreMockRecorder) URLsBulkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLsBulkDelete", reflect.TypeOf((*MockStore)(nil).URLsBulkDelete), arg0, arg1)
}
